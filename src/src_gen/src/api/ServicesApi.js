/*
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.60
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreateServiceResponse from '../model/CreateServiceResponse';
import ServiceRequest from '../model/ServiceRequest';
import ServiceResponse from '../model/ServiceResponse';

/**
* Services service.
* @module api/ServicesApi
* @version 1.1.0
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createService operation.
     * @callback moduleapi/ServicesApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new service
     * @param {module:model/ServiceRequest} body 
     * @param {module:api/ServicesApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createService(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createService");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceResponse;

      return this.apiClient.callApi(
        '/api/v1/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback moduleapi/ServicesApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a service
     * @param {String} serviceId 
     * @param {module:api/ServicesApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteService(serviceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/services/{serviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getServiceById operation.
     * @callback moduleapi/ServicesApi~getServiceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a service by ID
     * @param {String} serviceId 
     * @param {module:api/ServicesApi~getServiceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getServiceById(serviceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getServiceById");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceResponse;

      return this.apiClient.callApi(
        '/api/v1/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listServices operation.
     * @callback moduleapi/ServicesApi~listServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceResponse>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all services
     * @param {module:api/ServicesApi~listServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listServices(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceResponse];

      return this.apiClient.callApi(
        '/api/v1/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateService operation.
     * @callback moduleapi/ServicesApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a service
     * @param {module:model/ServiceRequest} body 
     * @param {String} serviceId 
     * @param {module:api/ServicesApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateService(body, serviceId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateService");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/services/{serviceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadChecker operation.
     * @callback moduleapi/ServicesApi~uploadCheckerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload zip-archive
     * Handler for upload zip-archive with checker 
     * @param {Blob} file 
     * @param {String} serviceId 
     * @param {module:api/ServicesApi~uploadCheckerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadChecker(file, serviceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadChecker");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling uploadChecker");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/services/{serviceId}/checker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadService operation.
     * @callback moduleapi/ServicesApi~uploadServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload zip service
     * Upload zip archive with service code images and etc... 
     * @param {Blob} file 
     * @param {String} serviceId 
     * @param {module:api/ServicesApi~uploadServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadService(file, serviceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadService");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling uploadService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/services/{serviceId}/service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}