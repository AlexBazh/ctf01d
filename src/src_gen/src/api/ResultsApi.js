/*
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.60
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CreateResultResponse from '../model/CreateResultResponse';
import ResultRequest from '../model/ResultRequest';
import ResultResponse from '../model/ResultResponse';

/**
* Results service.
* @module api/ResultsApi
* @version 1.1.0
*/
export default class ResultsApi {

    /**
    * Constructs a new ResultsApi. 
    * @alias module:api/ResultsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createResult operation.
     * @callback moduleapi/ResultsApi~createResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResultResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new game result
     * @param {module:model/ResultRequest} body 
     * @param {String} gameId 
     * @param {module:api/ResultsApi~createResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createResult(body, gameId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createResult");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling createResult");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResultResponse;

      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/results', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getResult operation.
     * @callback moduleapi/ResultsApi~getResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get game result
     * @param {String} gameId 
     * @param {String} resultId 
     * @param {module:api/ResultsApi~getResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getResult(gameId, resultId, callback) {
      
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getResult");
      }
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling getResult");
      }

      let pathParams = {
        'gameId': gameId,'resultId': resultId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultResponse;

      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/results/{resultId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getScoreboard operation.
     * @callback moduleapi/ResultsApi~getScoreboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get game scoreboard
     * @param {String} gameId 
     * @param {module:api/ResultsApi~getScoreboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getScoreboard(gameId, callback) {
      
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getScoreboard");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultResponse;

      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/scoreboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateResult operation.
     * @callback moduleapi/ResultsApi~updateResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a result
     * @param {module:model/ResultRequest} body 
     * @param {String} gameId 
     * @param {String} resultId 
     * @param {module:api/ResultsApi~updateResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateResult(body, gameId, resultId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateResult");
      }
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling updateResult");
      }
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling updateResult");
      }

      let pathParams = {
        'gameId': gameId,'resultId': resultId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/results/{resultId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}