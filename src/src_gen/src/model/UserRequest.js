/*
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.60
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The UserRequest model module.
 * @module model/UserRequest
 * @version 1.1.0
 */
export default class UserRequest {
  /**
   * Constructs a new <code>UserRequest</code>.
   * @alias module:model/UserRequest
   * @class
   * @param userName {String} The login of the user
   * @param role {module:model/UserRequest.RoleEnum} The role of the user (admin, player or guest)
   * @param status {String} Status of the user (active, disabled)
   * @param password {String} User password
   */
  constructor(userName, role, status, password) {
    this.userName = userName;
    this.role = role;
    this.status = status;
    this.password = password;
  }

  /**
   * Constructs a <code>UserRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserRequest} obj Optional instance to populate.
   * @return {module:model/UserRequest} The populated <code>UserRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UserRequest();
      if (data.hasOwnProperty('display_name'))
        obj.displayName = ApiClient.convertToType(data['display_name'], 'String');
      if (data.hasOwnProperty('user_name'))
        obj.userName = ApiClient.convertToType(data['user_name'], 'String');
      if (data.hasOwnProperty('role'))
        obj.role = ApiClient.convertToType(data['role'], 'String');
      if (data.hasOwnProperty('avatar_url'))
        obj.avatarUrl = ApiClient.convertToType(data['avatar_url'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('password'))
        obj.password = ApiClient.convertToType(data['password'], 'String');
      if (data.hasOwnProperty('team_ids'))
        obj.teamIds = ApiClient.convertToType(data['team_ids'], ['String']);
    }
    return obj;
  }
}

/**
 * The name of the user
 * @member {String} displayName
 */
UserRequest.prototype.displayName = undefined;

/**
 * The login of the user
 * @member {String} userName
 */
UserRequest.prototype.userName = undefined;

/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
UserRequest.RoleEnum = {
  /**
   * value: "admin"
   * @const
   */
  admin: "admin",

  /**
   * value: "player"
   * @const
   */
  player: "player",

  /**
   * value: "guest"
   * @const
   */
  guest: "guest"
};
/**
 * The role of the user (admin, player or guest)
 * @member {module:model/UserRequest.RoleEnum} role
 */
UserRequest.prototype.role = undefined;

/**
 * URL to the user's avatar
 * @member {String} avatarUrl
 */
UserRequest.prototype.avatarUrl = undefined;

/**
 * Status of the user (active, disabled)
 * @member {String} status
 */
UserRequest.prototype.status = undefined;

/**
 * User password
 * @member {String} password
 */
UserRequest.prototype.password = undefined;

/**
 * @member {Array.<String>} teamIds
 */
UserRequest.prototype.teamIds = undefined;

