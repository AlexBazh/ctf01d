/*
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.60
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CtfManagementApi);
  }
}(this, function(expect, CtfManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CtfManagementApi.TeamsApi();
  });

  describe('(package)', function() {
    describe('TeamsApi', function() {
      describe('approveUserTeam', function() {
        it('should call approveUserTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for approveUserTeam call and complete the assertions
          /*

          instance.approveUserTeam(teamId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CtfManagementApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('connectUserTeam', function() {
        it('should call connectUserTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for connectUserTeam call and complete the assertions
          /*

          instance.connectUserTeam(teamId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CtfManagementApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTeam', function() {
        it('should call createTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for createTeam call and complete the assertions
          /*

          instance.createTeam(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CtfManagementApi.CreateTeamResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTeam', function() {
        it('should call deleteTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTeam call
          /*

          instance.deleteTeam(teamId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTeamById', function() {
        it('should call getTeamById successfully', function(done) {
          // TODO: uncomment, update parameter values for getTeamById call and complete the assertions
          /*

          instance.getTeamById(teamId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CtfManagementApi.TeamResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('leaveUserFromTeam', function() {
        it('should call leaveUserFromTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for leaveUserFromTeam call and complete the assertions
          /*

          instance.leaveUserFromTeam(teamId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CtfManagementApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listTeams', function() {
        it('should call listTeams successfully', function(done) {
          // TODO: uncomment listTeams call and complete the assertions
          /*

          instance.listTeams(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CtfManagementApi.TeamResponse);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamMembers', function() {
        it('should call teamMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for teamMembers call and complete the assertions
          /*

          instance.teamMembers(teamId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CtfManagementApi.UserResponse);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTeam', function() {
        it('should call updateTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTeam call
          /*

          instance.updateTeam(body, teamId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
